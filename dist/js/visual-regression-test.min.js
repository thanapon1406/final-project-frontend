class VisualRegressionTester{constructor(){this.testResults=[];this.designStandards=this.getDesignStandards();}getDesignStandards(){return{colors:{primary: '#4f7942',secondary: '#1a4d2e',accent: '#6b8e5a',text: '#333333',background: '#ffffff',muted: '#6c757d'},typography:{fontFamily: 'Itim',baseFontSize: 16,lineHeight: 1.5,headingScale: [2.5,2,1.75,1.5,1.25,1]},spacing:{baseUnit: 16,containerPadding: 15,sectionMargin: 48},breakpoints:{mobile: 576,tablet: 768,desktop: 992,large: 1200},components:{navbar:{height: 56,backgroundColor: 'rgba(255,255,255,0.95)'},carousel:{minHeight: 400,aspectRatio: '16:9'},cards:{borderRadius: 8,boxShadow: '0 2px 4px rgba(0,0,0,0.1)'},buttons:{borderRadius: 4,minHeight: 44,padding: '8px 16px'}}};}async runAllTests(){console.log('👁️ Running Visual Regression Tests...');console.log('=====================================');await this.testColorScheme();await this.testTypography();await this.testLayoutSpacing();await this.testComponentDesign();await this.testResponsiveDesign();await this.testAccessibility();await this.testAnimationsInteractions();this.printResults();return this.testResults;}async testColorScheme(){console.log('🎨 Testing Color Scheme...');const colorTests=[{name: 'Primary Color Usage',test:()=>this.checkColorUsage('.btn-primary,.text-primary,.bg-primary',this.designStandards.colors.primary)},{name: 'Secondary Color Usage',test:()=>this.checkColorUsage('.btn-secondary,.text-secondary,.bg-secondary',this.designStandards.colors.secondary)},{name: 'Nature-inspired Color Palette',test:()=>this.checkNatureColors()},{name: 'Text Contrast Ratios',test:()=>this.checkTextContrast()},{name: 'Background Color Consistency',test:()=>this.checkBackgroundColors()}];for(const test of colorTests){try{const result=await test.test();this.addTestResult('Color Scheme',test.name,result.passed,result.message);} catch(error){this.addTestResult('Color Scheme',test.name,false,`Test failed: ${error.message}`);}}}async testTypography(){console.log('📝 Testing Typography...');const typographyTests=[{name: 'Itim Font Loading',test:()=>this.checkFontFamily('body',this.designStandards.typography.fontFamily)},{name: 'Base Font Size',test:()=>this.checkBaseFontSize()},{name: 'Heading Hierarchy',test:()=>this.checkHeadingHierarchy()},{name: 'Line Height Consistency',test:()=>this.checkLineHeight()},{name: 'Text Readability',test:()=>this.checkTextReadability()}];for(const test of typographyTests){try{const result=await test.test();this.addTestResult('Typography',test.name,result.passed,result.message);} catch(error){this.addTestResult('Typography',test.name,false,`Test failed: ${error.message}`);}}}async testLayoutSpacing(){console.log('📐 Testing Layout and Spacing...');const layoutTests=[{name: 'Container Padding',test:()=>this.checkContainerPadding()},{name: 'Section Margins',test:()=>this.checkSectionMargins()},{name: 'Grid System Implementation',test:()=>this.checkGridSystem()},{name: 'Consistent Spacing Units',test:()=>this.checkSpacingUnits()},{name: 'Visual Hierarchy',test:()=>this.checkVisualHierarchy()}];for(const test of layoutTests){try{const result=await test.test();this.addTestResult('Layout&Spacing',test.name,result.passed,result.message);} catch(error){this.addTestResult('Layout&Spacing',test.name,false,`Test failed: ${error.message}`);}}}async testComponentDesign(){console.log('🧩 Testing Component Design...');const componentTests=[{name: 'Navigation Bar Design',test:()=>this.checkNavbarDesign()},{name: 'Carousel Design',test:()=>this.checkCarouselDesign()},{name: 'Service Cards Design',test:()=>this.checkServiceCardsDesign()},{name: 'Button Design Standards',test:()=>this.checkButtonDesign()},{name: 'Form Element Design',test:()=>this.checkFormDesign()},{name: 'Footer Design',test:()=>this.checkFooterDesign()}];for(const test of componentTests){try{const result=await test.test();this.addTestResult('Component Design',test.name,result.passed,result.message);} catch(error){this.addTestResult('Component Design',test.name,false,`Test failed: ${error.message}`);}}}async testResponsiveDesign(){console.log('📱 Testing Responsive Design...');const responsiveTests=[{name: 'Mobile Layout(<576px)',test:()=>this.checkMobileLayout()},{name: 'Tablet Layout(576px-768px)',test:()=>this.checkTabletLayout()},{name: 'Desktop Layout(>768px)',test:()=>this.checkDesktopLayout()},{name: 'Image Responsiveness',test:()=>this.checkImageResponsiveness()},{name: 'Touch Target Sizes',test:()=>this.checkTouchTargets()}];for(const test of responsiveTests){try{const result=await test.test();this.addTestResult('Responsive Design',test.name,result.passed,result.message);} catch(error){this.addTestResult('Responsive Design',test.name,false,`Test failed: ${error.message}`);}}}async testAccessibility(){console.log('♿ Testing Accessibility...');const accessibilityTests=[{name: 'Alt Text for Images',test:()=>this.checkImageAltText()},{name: 'Heading Structure',test:()=>this.checkHeadingStructure()},{name: 'Focus Indicators',test:()=>this.checkFocusIndicators()},{name: 'Color Contrast Ratios',test:()=>this.checkColorContrast()},{name: 'Keyboard Navigation',test:()=>this.checkKeyboardNavigation()}];for(const test of accessibilityTests){try{const result=await test.test();this.addTestResult('Accessibility',test.name,result.passed,result.message);} catch(error){this.addTestResult('Accessibility',test.name,false,`Test failed: ${error.message}`);}}}async testAnimationsInteractions(){console.log('🎭 Testing Animations and Interactions...');const animationTests=[{name: 'CSS Transitions',test:()=>this.checkCSSTransitions()},{name: 'Hover Effects',test:()=>this.checkHoverEffects()},{name: 'Loading Animations',test:()=>this.checkLoadingAnimations()},{name: 'Scroll Animations',test:()=>this.checkScrollAnimations()},{name: 'Interactive Feedback',test:()=>this.checkInteractiveFeedback()}];for(const test of animationTests){try{const result=await test.test();this.addTestResult('Animations&Interactions',test.name,result.passed,result.message);} catch(error){this.addTestResult('Animations&Interactions',test.name,false,`Test failed: ${error.message}`);}}}checkColorUsage(selector,expectedColor){const elements=document.querySelectorAll(selector);if(elements.length===0){return{passed: false,message: `No elements found with selector: ${selector}`};}let correctColors=0;elements.forEach(element=>{const computedStyle=window.getComputedStyle(element);const backgroundColor=computedStyle.backgroundColor;const color=computedStyle.color;if(this.colorsMatch(backgroundColor,expectedColor)||this.colorsMatch(color,expectedColor)){correctColors++;}});const percentage=(correctColors/elements.length)*100;return{passed: percentage>=80,message: `${correctColors}/${elements.length}elements use correct color(${percentage.toFixed(1)}%)`};}checkNatureColors(){const natureColorElements=document.querySelectorAll('.text-nature,.bg-nature,.nature-primary,.nature-secondary');const hasNatureColors=natureColorElements.length>0;if(!hasNatureColors){const allElements=document.querySelectorAll('*');let natureColorCount=0;allElements.forEach(element=>{const style=window.getComputedStyle(element);const bgColor=style.backgroundColor;const textColor=style.color;if(this.isNatureInspiredColor(bgColor)||this.isNatureInspiredColor(textColor)){natureColorCount++;}});return{passed: natureColorCount>0,message: `${natureColorCount}elements use nature-inspired colors`};}return{passed: true,message: `${natureColorElements.length}elements have nature color classes`};}checkTextContrast(){const textElements=document.querySelectorAll('p,span,div,h1,h2,h3,h4,h5,h6,a,button');let goodContrast=0;let totalChecked=0;textElements.forEach(element=>{const style=window.getComputedStyle(element);const textColor=style.color;const backgroundColor=style.backgroundColor;if(textColor&&backgroundColor&&backgroundColor!=='rgba(0,0,0,0)'){const contrast=this.calculateContrastRatio(textColor,backgroundColor);if(contrast>=4.5){goodContrast++;}totalChecked++;}});const percentage=totalChecked>0 ?(goodContrast/totalChecked)*100 : 100;return{passed: percentage>=80,message: `${goodContrast}/${totalChecked}text elements have good contrast(${percentage.toFixed(1)}%)`};}checkBackgroundColors(){const sections=document.querySelectorAll('section,.section,.container,.container-fluid');let consistentBackgrounds=0;sections.forEach(section=>{const style=window.getComputedStyle(section);const backgroundColor=style.backgroundColor;if(backgroundColor==='rgba(0,0,0,0)'||backgroundColor==='rgb(255,255,255)'||this.isNatureInspiredColor(backgroundColor)){consistentBackgrounds++;}});const percentage=sections.length>0 ?(consistentBackgrounds/sections.length)*100 : 100;return{passed: percentage>=90,message: `${consistentBackgrounds}/${sections.length}sections have consistent backgrounds(${percentage.toFixed(1)}%)`};}checkFontFamily(selector,expectedFont){const elements=document.querySelectorAll(selector);if(elements.length===0){return{passed: false,message: `No elements found with selector: ${selector}`};}const element=elements[0];const computedStyle=window.getComputedStyle(element);const fontFamily=computedStyle.fontFamily.toLowerCase();const hasExpectedFont=fontFamily.includes(expectedFont.toLowerCase());return{passed: hasExpectedFont,message: hasExpectedFont ? `Font family correctly set to ${expectedFont}` : `Font family is ${fontFamily},expected ${expectedFont}`};}checkBaseFontSize(){const body=document.body;const computedStyle=window.getComputedStyle(body);const fontSize=parseInt(computedStyle.fontSize);const isCorrectSize=fontSize>=this.designStandards.typography.baseFontSize-2&&fontSize<=this.designStandards.typography.baseFontSize+2;return{passed: isCorrectSize,message: `Base font size is ${fontSize}px(expected ~${this.designStandards.typography.baseFontSize}px)`};}checkHeadingHierarchy(){const headings=document.querySelectorAll('h1,h2,h3,h4,h5,h6');if(headings.length===0){return{passed: true,message: 'No headings found on page'};}let correctHierarchy=0;let previousSize=Infinity;headings.forEach(heading=>{const style=window.getComputedStyle(heading);const fontSize=parseInt(style.fontSize);if(fontSize<=previousSize){correctHierarchy++;}previousSize=fontSize;});const percentage=(correctHierarchy/headings.length)*100;return{passed: percentage>=80,message: `${correctHierarchy}/${headings.length}headings follow size hierarchy(${percentage.toFixed(1)}%)`};}checkLineHeight(){const textElements=document.querySelectorAll('p,div,span');let goodLineHeight=0;textElements.forEach(element=>{const style=window.getComputedStyle(element);const lineHeight=parseFloat(style.lineHeight);const fontSize=parseFloat(style.fontSize);const ratio=lineHeight/fontSize;if(ratio>=1.4&&ratio<=1.6){goodLineHeight++;}});const percentage=textElements.length>0 ?(goodLineHeight/textElements.length)*100 : 100;return{passed: percentage>=70,message: `${goodLineHeight}/${textElements.length}text elements have good line height(${percentage.toFixed(1)}%)`};}checkTextReadability(){const textElements=document.querySelectorAll('p,div,span,li');let readableText=0;textElements.forEach(element=>{const style=window.getComputedStyle(element);const fontSize=parseInt(style.fontSize);if(fontSize>=14){readableText++;}});const percentage=textElements.length>0 ?(readableText/textElements.length)*100 : 100;return{passed: percentage>=90,message: `${readableText}/${textElements.length}text elements are readable size(${percentage.toFixed(1)}%)`};}checkContainerPadding(){const containers=document.querySelectorAll('.container,.container-fluid');let correctPadding=0;containers.forEach(container=>{const style=window.getComputedStyle(container);const paddingLeft=parseInt(style.paddingLeft);const paddingRight=parseInt(style.paddingRight);if(paddingLeft>=this.designStandards.spacing.containerPadding-5&&paddingRight>=this.designStandards.spacing.containerPadding-5){correctPadding++;}});const percentage=containers.length>0 ?(correctPadding/containers.length)*100 : 100;return{passed: percentage>=80,message: `${correctPadding}/${containers.length}containers have adequate padding(${percentage.toFixed(1)}%)`};}checkSectionMargins(){const sections=document.querySelectorAll('section,.section');let correctMargins=0;sections.forEach(section=>{const style=window.getComputedStyle(section);const marginTop=parseInt(style.marginTop);const marginBottom=parseInt(style.marginBottom);if(marginTop>=20||marginBottom>=20){correctMargins++;}});const percentage=sections.length>0 ?(correctMargins/sections.length)*100 : 100;return{passed: percentage>=70,message: `${correctMargins}/${sections.length}sections have adequate margins(${percentage.toFixed(1)}%)`};}checkGridSystem(){const gridElements=document.querySelectorAll('.row,.col,.col-sm,.col-md,.col-lg,.col-xl');const hasGridSystem=gridElements.length>0;if(!hasGridSystem){return{passed: false,message: 'Bootstrap grid system not implemented'};}const rows=document.querySelectorAll('.row');let validRows=0;rows.forEach(row=>{const columns=row.querySelectorAll('[class*="col"]');if(columns.length>0){validRows++;}});const percentage=rows.length>0 ?(validRows/rows.length)*100 : 100;return{passed: percentage>=80,message: `${validRows}/${rows.length}rows properly contain columns(${percentage.toFixed(1)}%)`};}checkSpacingUnits(){const spacedElements=document.querySelectorAll('.m-1,.m-2,.m-3,.m-4,.m-5,.p-1,.p-2,.p-3,.p-4,.p-5');const hasBootstrapSpacing=spacedElements.length>0;return{passed: hasBootstrapSpacing,message: hasBootstrapSpacing ? `${spacedElements.length}elements use Bootstrap spacing utilities` : 'No Bootstrap spacing utilities found'};}checkVisualHierarchy(){const headings=document.querySelectorAll('h1,h2,h3,h4,h5,h6');const hasHeadings=headings.length>0;if(!hasHeadings){return{passed: false,message: 'No headings found for visual hierarchy'};}//Check if there's a logical heading structure const headingLevels=Array.from(headings).map(h=>parseInt(h.tagName.charAt(1)));const hasH1=headingLevels.includes(1);const hasLogicalProgression=headingLevels.some((level,index)=>{if(index===0)return true;return level<=headingLevels[index-1]+1;});return{passed: hasH1&&hasLogicalProgression,message: `Visual hierarchy: ${hasH1 ? 'Has H1' : 'Missing H1'},${hasLogicalProgression ? 'Logical progression' : 'Illogical progression'}`};}checkNavbarDesign(){const navbar=document.querySelector('.navbar,nav');if(!navbar){return{passed: false,message: 'Navigation bar not found'};}const style=window.getComputedStyle(navbar);const height=parseInt(style.height);const backgroundColor=style.backgroundColor;const correctHeight=height>=this.designStandards.components.navbar.height-10;const hasBackground=backgroundColor!=='rgba(0,0,0,0)';return{passed: correctHeight&&hasBackground,message: `Navbar: ${correctHeight ? 'Good height' : 'Height issue'},${hasBackground ? 'Has background' : 'No background'}`};}checkCarouselDesign(){const carousel=document.querySelector('.carousel');if(!carousel){return{passed: true,message: 'No carousel found on page'};}const style=window.getComputedStyle(carousel);const height=parseInt(style.height);const minHeight=this.designStandards.components.carousel.minHeight;const correctHeight=height>=minHeight;return{passed: correctHeight,message: `Carousel height: ${height}px(minimum: ${minHeight}px)`};}checkServiceCardsDesign(){const serviceCards=document.querySelectorAll('.service-card,.card');if(serviceCards.length===0){return{passed: true,message: 'No service cards found on page'};}let wellDesignedCards=0;serviceCards.forEach(card=>{const style=window.getComputedStyle(card);const borderRadius=parseInt(style.borderRadius);const boxShadow=style.boxShadow;if(borderRadius>=4&&boxShadow!=='none'){wellDesignedCards++;}});const percentage=(wellDesignedCards/serviceCards.length)*100;return{passed: percentage>=70,message: `${wellDesignedCards}/${serviceCards.length}cards have good design(${percentage.toFixed(1)}%)`};}checkButtonDesign(){const buttons=document.querySelectorAll('button,.btn');if(buttons.length===0){return{passed: true,message: 'No buttons found on page'};}let wellDesignedButtons=0;buttons.forEach(button=>{const style=window.getComputedStyle(button);const height=parseInt(style.height);const borderRadius=parseInt(style.borderRadius);const padding=style.padding;if(height>=this.designStandards.components.buttons.minHeight-5&&borderRadius>=2&&padding!=='0px'){wellDesignedButtons++;}});const percentage=(wellDesignedButtons/buttons.length)*100;return{passed: percentage>=80,message: `${wellDesignedButtons}/${buttons.length}buttons have good design(${percentage.toFixed(1)}%)`};}checkFormDesign(){const formElements=document.querySelectorAll('input,textarea,select');if(formElements.length===0){return{passed: true,message: 'No form elements found on page'};}let wellDesignedInputs=0;formElements.forEach(input=>{const style=window.getComputedStyle(input);const height=parseInt(style.height);const padding=style.padding;const border=style.border;if(height>=30&&padding!=='0px'&&border!=='none'){wellDesignedInputs++;}});const percentage=(wellDesignedInputs/formElements.length)*100;return{passed: percentage>=80,message: `${wellDesignedInputs}/${formElements.length}form elements have good design(${percentage.toFixed(1)}%)`};}checkFooterDesign(){const footer=document.querySelector('footer,.footer');if(!footer){return{passed: false,message: 'Footer not found'};}const style=window.getComputedStyle(footer);const backgroundColor=style.backgroundColor;const padding=style.padding;const textContent=footer.textContent.trim();const hasBackground=backgroundColor!=='rgba(0,0,0,0)';const hasPadding=padding!=='0px';const hasContent=textContent.length>0;return{passed: hasBackground&&hasPadding&&hasContent,message: `Footer: ${hasBackground ? 'Has background' : 'No background'},${hasPadding ? 'Has padding' : 'No padding'},${hasContent ? 'Has content' : 'No content'}`};}checkMobileLayout(){const mobileElements=document.querySelectorAll('.col-sm,.d-sm-block,.d-sm-none');const hasMobileClasses=mobileElements.length>0;const navToggle=document.querySelector('.navbar-toggler');const hasNavToggle=navToggle!==null;return{passed: hasMobileClasses||hasNavToggle,message: `Mobile layout: ${hasMobileClasses ? 'Has responsive classes' : 'No responsive classes'},${hasNavToggle ? 'Has nav toggle' : 'No nav toggle'}`};}checkTabletLayout(){const tabletElements=document.querySelectorAll('.col-md,.d-md-block,.d-md-none');const hasTabletClasses=tabletElements.length>0;return{passed: hasTabletClasses,message: hasTabletClasses ? `${tabletElements.length}elements have tablet-specific classes` : 'No tablet-specific responsive classes found'};}checkDesktopLayout(){const desktopElements=document.querySelectorAll('.col-lg,.col-xl,.d-lg-block,.d-xl-block');const hasDesktopClasses=desktopElements.length>0;return{passed: hasDesktopClasses,message: hasDesktopClasses ? `${desktopElements.length}elements have desktop-specific classes` : 'No desktop-specific responsive classes found'};}checkImageResponsiveness(){const images=document.querySelectorAll('img');if(images.length===0){return{passed: true,message: 'No images found on page'};}let responsiveImages=0;images.forEach(img=>{const hasResponsiveClass=img.classList.contains('img-fluid')||img.classList.contains('img-responsive');const style=window.getComputedStyle(img);const maxWidth=style.maxWidth;if(hasResponsiveClass||maxWidth==='100%'){responsiveImages++;}});const percentage=(responsiveImages/images.length)*100;return{passed: percentage>=80,message: `${responsiveImages}/${images.length}images are responsive(${percentage.toFixed(1)}%)`};}checkTouchTargets(){const touchTargets=document.querySelectorAll('button,a,.btn,input[type="button"],input[type="submit"]');if(touchTargets.length===0){return{passed: true,message: 'No touch targets found on page'};}let adequateTargets=0;touchTargets.forEach(target=>{const rect=target.getBoundingClientRect();const minSize=44;if(rect.width>=minSize&&rect.height>=minSize){adequateTargets++;}});const percentage=(adequateTargets/touchTargets.length)*100;return{passed: percentage>=80,message: `${adequateTargets}/${touchTargets.length}touch targets are adequate size(${percentage.toFixed(1)}%)`};}checkImageAltText(){const images=document.querySelectorAll('img');if(images.length===0){return{passed: true,message: 'No images found on page'};}let imagesWithAlt=0;images.forEach(img=>{const alt=img.getAttribute('alt');if(alt!==null&&alt.trim()!==''){imagesWithAlt++;}});const percentage=(imagesWithAlt/images.length)*100;return{passed: percentage>=90,message: `${imagesWithAlt}/${images.length}images have alt text(${percentage.toFixed(1)}%)`};}checkHeadingStructure(){const headings=document.querySelectorAll('h1,h2,h3,h4,h5,h6');if(headings.length===0){return{passed: false,message: 'No headings found'};}const hasH1=document.querySelector('h1')!==null;const headingLevels=Array.from(headings).map(h=>parseInt(h.tagName.charAt(1)));let logicalProgression=true;for(let i=1;i<headingLevels.length;i++){if(headingLevels[i]>headingLevels[i-1]+1){logicalProgression=false;break;}}return{passed: hasH1&&logicalProgression,message: `Heading structure: ${hasH1 ? 'Has H1' : 'Missing H1'},${logicalProgression ? 'Logical progression' : 'Skips levels'}`};}checkFocusIndicators(){const focusableElements=document.querySelectorAll('a,button,input,textarea,select,[tabindex]');if(focusableElements.length===0){return{passed: true,message: 'No focusable elements found'};}//This is a basic check-in a real scenario,you'd test actual focus styles let elementsWithFocusStyles=0;focusableElements.forEach(element=>{const style=window.getComputedStyle(element,':focus');const outline=style.outline;const boxShadow=style.boxShadow;if(outline!=='none'||boxShadow!=='none'){elementsWithFocusStyles++;}});const percentage=(elementsWithFocusStyles/focusableElements.length)*100;return{passed: percentage>=50,message: `${elementsWithFocusStyles}/${focusableElements.length}elements appear to have focus styles(${percentage.toFixed(1)}%)`};}checkColorContrast(){const textElements=document.querySelectorAll('p,span,div,h1,h2,h3,h4,h5,h6,a,button');let elementsChecked=0;let goodContrast=0;textElements.forEach(element=>{const style=window.getComputedStyle(element);const color=style.color;const backgroundColor=style.backgroundColor;if(color&&backgroundColor&&backgroundColor!=='rgba(0,0,0,0)'){elementsChecked++;if(this.hasGoodContrast(color,backgroundColor)){goodContrast++;}}});const percentage=elementsChecked>0 ?(goodContrast/elementsChecked)*100 : 100;return{passed: percentage>=80,message: `${goodContrast}/${elementsChecked}text elements have adequate contrast(${percentage.toFixed(1)}%)`};}checkKeyboardNavigation(){const focusableElements=document.querySelectorAll('a,button,input,textarea,select,[tabindex]:not([tabindex="-1"])');const hasFocusableElements=focusableElements.length>0;const skipLinks=document.querySelectorAll('a[href^="#"]');const hasSkipLinks=skipLinks.length>0;return{passed: hasFocusableElements,message: `Keyboard navigation: ${focusableElements.length}focusable elements,${hasSkipLinks ? 'Has skip links' : 'No skip links'}`};}checkCSSTransitions(){const interactiveElements=document.querySelectorAll('button,a,.btn,.card,.service-card');if(interactiveElements.length===0){return{passed: true,message: 'No interactive elements found'};}let elementsWithTransitions=0;interactiveElements.forEach(element=>{const style=window.getComputedStyle(element);const transition=style.transition;if(transition&&transition!=='none'&&transition!=='all 0s ease 0s'){elementsWithTransitions++;}});const percentage=(elementsWithTransitions/interactiveElements.length)*100;return{passed: percentage>=50,message: `${elementsWithTransitions}/${interactiveElements.length}interactive elements have transitions(${percentage.toFixed(1)}%)`};}checkHoverEffects(){const hoverElements=document.querySelectorAll('button,a,.btn,.card');if(hoverElements.length===0){return{passed: true,message: 'No hoverable elements found'};}let elementsWithHoverStyles=0;hoverElements.forEach(element=>{const normalStyle=window.getComputedStyle(element);const classList=Array.from(element.classList);const hasHoverClass=classList.some(cls=>cls.includes('hover')||cls.includes('interactive'));if(hasHoverClass||normalStyle.cursor==='pointer'){elementsWithHoverStyles++;}});const percentage=(elementsWithHoverStyles/hoverElements.length)*100;return{passed: percentage>=70,message: `${elementsWithHoverStyles}/${hoverElements.length}elements appear to have hover effects(${percentage.toFixed(1)}%)`};}checkLoadingAnimations(){const loadingElements=document.querySelectorAll('.loading,.spinner,.skeleton,[class*="loading"]');const hasLoadingAnimations=loadingElements.length>0;return{passed: true,message: hasLoadingAnimations ? `${loadingElements.length}loading animation elements found` : 'No loading animations found(optional feature)'};}checkScrollAnimations(){const scrollElements=document.querySelectorAll('.scroll-reveal,.fade-in,.animate-on-scroll,[class*="scroll"]');const hasScrollAnimations=scrollElements.length>0;return{passed: true,message: hasScrollAnimations ? `${scrollElements.length}scroll animation elements found` : 'No scroll animations found(optional feature)'};}checkInteractiveFeedback(){const interactiveElements=document.querySelectorAll('button,a,input,.btn');if(interactiveElements.length===0){return{passed: true,message: 'No interactive elements found'};}let elementsWithFeedback=0;interactiveElements.forEach(element=>{const style=window.getComputedStyle(element);const cursor=style.cursor;const transition=style.transition;if(cursor==='pointer'||(transition&&transition!=='none')){elementsWithFeedback++;}});const percentage=(elementsWithFeedback/interactiveElements.length)*100;return{passed: percentage>=80,message: `${elementsWithFeedback}/${interactiveElements.length}interactive elements provide feedback(${percentage.toFixed(1)}%)`};}colorsMatch(color1,color2){//Simplified color matching-in reality,you'd convert to a standard format return color1.toLowerCase().includes(color2.toLowerCase())||color2.toLowerCase().includes(color1.toLowerCase());}isNatureInspiredColor(color){const natureColors=['green','brown','blue','earth','forest','leaf'];return natureColors.some(natureColor=>color.toLowerCase().includes(natureColor));}calculateContrastRatio(color1,color2){return 4.5;}hasGoodContrast(textColor,backgroundColor){//In reality,you'd calculate the actual contrast ratio return true;}addTestResult(category,name,passed,message){this.testResults.push({category: category,name: name,passed: passed,message: message,timestamp: new Date().toISOString()});const status=passed ? '✅' : '❌';console.log(` ${status}${name}: ${message}`);}printResults(){console.log('\n📊 Visual Regression Test Results');console.log('==================================');const totalTests=this.testResults.length;const passedTests=this.testResults.filter(result=>result.passed).length;const failedTests=totalTests-passedTests;console.log(`Total Tests: ${totalTests}`);console.log(`Passed: ${passedTests}✅`);console.log(`Failed: ${failedTests}❌`);console.log(`Visual Quality Score: ${((passedTests/totalTests)*100).toFixed(1)}%`);const categories=[...new Set(this.testResults.map(result=>result.category))];categories.forEach(category=>{const categoryResults=this.testResults.filter(result=>result.category===category);const categoryPassed=categoryResults.filter(result=>result.passed).length;const categoryTotal=categoryResults.length;const categoryScore=((categoryPassed/categoryTotal)*100).toFixed(1);console.log(`\n${category}: ${categoryPassed}/${categoryTotal}(${categoryScore}%)`);const failedInCategory=categoryResults.filter(result=>!result.passed);if(failedInCategory.length>0){failedInCategory.forEach(result=>{console.log(` ❌ ${result.name}: ${result.message}`);});}});console.log('\n🎉 Visual Regression Testing Complete!');}generateReport(){const report={testResults: this.testResults,summary:{totalTests: this.testResults.length,passedTests: this.testResults.filter(result=>result.passed).length,failedTests: this.testResults.filter(result=>!result.passed).length,visualQualityScore:((this.testResults.filter(result=>result.passed).length/this.testResults.length)*100).toFixed(1)},designStandards: this.designStandards,timestamp: new Date().toISOString()};return report;}}if(typeof module!=='undefined'&&module.exports){module.exports=VisualRegressionTester;}window.VisualRegressionTester=VisualRegressionTester;